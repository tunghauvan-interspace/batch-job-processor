# Batch Job Processor

A Java 17 application that processes messages from AWS SQS and uploads them to S3, with OpenTelemetry tracing and Jaeger integration.

## Features

- **SQS to S3 Flow**: Polls messages from SQS and uploads them to S3
- **OpenTelemetry Tracing**: Full distributed tracing with Jaeger export
- **Retry Logic**: Exponential backoff with configurable retry attempts
- **Dead Letter Queue**: Failed messages are sent to DLQ after max retries
- **LocalStack Support**: Development environment using LocalStack for AWS services
- **Containerized**: Docker support for easy deployment

## Architecture

```
┌─────────────┐    ┌──────────────────┐    ┌─────────────┐
│     SQS     │───▶│  Batch Processor │───▶│     S3      │
│   Queue     │    │                  │    │   Bucket    │
└─────────────┘    └──────────────────┘    └─────────────┘
       │                      │                    
       ▼                      ▼                    
┌─────────────┐    ┌──────────────────┐            
│  SQS DLQ    │    │     Jaeger       │            
│             │    │    Tracing       │            
└─────────────┘    └──────────────────┘            
```

## Prerequisites

- Java 17+
- Maven 3.6+
- Docker & Docker Compose
- AWS CLI (for testing with LocalStack)

## Quick Start

### 1. Start Development Environment

```bash
# Start LocalStack and Jaeger
docker-compose up -d

# Setup AWS resources (queues and buckets)
./scripts/setup-dev.sh
```

### 2. Build Application

```bash
mvn clean package
```

### 3. Run Application

```bash
java -jar target/batch-job-processor-1.0.0.jar
```

### 4. Send Test Messages

```bash
# Send a test message to SQS
./scripts/send-test-message.sh
```

### 5. View Traces

Open Jaeger UI at http://localhost:16686 to view distributed traces.

## Configuration

Application configuration is in `src/main/resources/application.properties`:

```properties
# SQS Configuration
app.sqs.queue-url=http://localhost:4566/000000000000/batch-job-queue
app.sqs.dlq-url=http://localhost:4566/000000000000/batch-job-dlq

# S3 Configuration
app.s3.bucket-name=batch-job-bucket
app.s3.region=us-east-1

# Retry Configuration
app.retry.max-attempts=3
app.retry.initial-delay-ms=1000
app.retry.max-delay-ms=30000

# AWS LocalStack Configuration
aws.region=us-east-1
aws.endpoint=http://localhost:4566
aws.access-key-id=test
aws.secret-access-key=test
```

## Services Overview

### SqsPoller
- Polls messages from configured SQS queue
- Processes messages with retry logic
- Sends failed messages to DLQ after max retries
- Creates OpenTelemetry spans for each operation

### S3Uploader
- Uploads message content to S3 bucket
- Uses message ID as object key
- Includes OpenTelemetry tracing

### RetryService
- Implements exponential backoff with jitter
- Configurable max attempts and delays
- Creates spans for retry attempts

### TelemetryConfig
- Initializes OpenTelemetry SDK
- Configures Jaeger exporter
- Provides global tracer instance

## Testing

### Run Unit Tests
```bash
mvn test -Dtest=S3UploaderTest,RetryServiceTest,SqsPollerTest
```

### Run Integration Tests (requires Docker)
```bash
mvn test -Dtest=BatchJobProcessorIntegrationTest
```

### Run All Tests
```bash
mvn test
```

## Docker

### Build Docker Image
```bash
docker build -t batch-job-processor .
```

### Run with Docker Compose
```bash
docker-compose up
```

## Monitoring

### Jaeger Tracing
- Access Jaeger UI at http://localhost:16686
- View traces for service "batch-job-processor"
- Traces include SQS polling, S3 uploads, and retry attempts

### LocalStack Dashboard
- Access LocalStack at http://localhost:4566
- Check SQS queues and S3 buckets

## Development

### Project Structure
```
src/
├── main/java/com/interspace/batchjob/
│   ├── config/          # Configuration classes
│   ├── service/         # Core business logic
│   ├── telemetry/       # OpenTelemetry setup
│   └── BatchJobProcessorApplication.java
├── test/java/com/interspace/batchjob/
│   ├── service/         # Unit tests
│   └── integration/     # Integration tests
└── main/resources/
    ├── application.properties
    └── logback.xml
```

### Key Components

1. **AppConfig**: Centralized configuration management
2. **AwsClientFactory**: AWS client creation with LocalStack support
3. **SqsPoller**: Main message processing loop
4. **S3Uploader**: S3 upload functionality
5. **RetryService**: Retry logic with exponential backoff
6. **TelemetryConfig**: OpenTelemetry initialization

## Troubleshooting

### Common Issues

1. **Connection refused to LocalStack**
   - Ensure Docker is running: `docker ps`
   - Check LocalStack health: `curl http://localhost:4566/_localstack/health`

2. **Jaeger traces not appearing**
   - Verify Jaeger is running: `curl http://localhost:16686`
   - Check application logs for OpenTelemetry export errors

3. **SQS queue not found**
   - Run setup script: `./scripts/setup-dev.sh`
   - Verify queues exist: `aws --endpoint-url=http://localhost:4566 sqs list-queues`

4. **S3 bucket access denied**
   - Ensure bucket exists: `aws --endpoint-url=http://localhost:4566 s3 ls`
   - Check LocalStack logs: `docker logs localstack`

### Logs

Application logs include:
- Message processing status
- Retry attempts with delay information
- S3 upload confirmations
- Error details with stack traces

## License

This project is licensed under the MIT License.
